import argparse
import json
import os
from collections import defaultdict
from os.path import join
from typing import Dict, List, Set, Tuple

from git import Repo
from tqdm import tqdm

from new.constants import ISSUE_TO_COMMITS_FILE, CHANGED_METHODS_FILE
from new.data_aggregation.changes.get_java_methods import find_changed_methods_by_language, MethodSignature


def load_issue_to_commits(data_dir: str) -> Dict[int, List[str]]:
    load_path = join(data_dir, ISSUE_TO_COMMITS_FILE)
    with open(load_path, "r") as file:
        issue_to_commits = json.load(file)
        issue_to_commits = {int(issue_id): commits for issue_id, commits in issue_to_commits.items()}
        return issue_to_commits


def save(changed_methods: Dict[int, List[str]], data_dir: str):
    # changed_methods: issue_id -> list of full method name.
    save_path = join(data_dir, CHANGED_METHODS_FILE)
    with open(save_path, "w") as file:
        json.dump(changed_methods, file, indent=4)


def is_file_match(file_name: str) -> bool:
    # File is from Java or Kotlin and not autogenerated.
    def is_lang_match(name: str) -> bool:
        patterns = [".java", ".kt"]

        for pattern in patterns:
            if name.endswith(pattern):
                return True

        return False

    def is_autogen(name: str) -> bool:
        return "auto_generated" in name

    return is_lang_match(file_name) and not is_autogen(file_name)


def get_modified_files_by_commits(repo: Repo, prev_commit_hash: str, commit_hash: str) -> List[str]:
    prev_commit = repo.commit(prev_commit_hash)
    commit = repo.commit(commit_hash)
    diff_index = commit.diff(prev_commit)
    diff_files = []
    for diff_item in diff_index.iter_change_type('M'):
        diff_files.append(diff_item.b_path)
        # if len(diff_files) > MAX_DIFF_FILES:
        #     return []

    diff_files = list(filter(is_file_match, diff_files))
    # diff_files = list(map(lambda name: name.replace("/", "."), diff_files))
    return diff_files


# TODO: Refactoring
def parse_method_signature(changed_methods: Set[MethodSignature]) -> List[Tuple[str, str]]:
    methods = []
    for changed_method in changed_methods:
        if isinstance(changed_method, tuple):
            continue
        full_method_name = changed_method.name
        file_name = full_method_name.split(': ')[0]
        method_name = full_method_name.split(': ')[-1].split()[-1]
        methods.append((file_name, method_name))
    return methods


# TODO: Refactoring
def get_commit_changed_methods(repo: Repo, commit_hash: str) -> List[str]:
    # try:
        prev_commit_hash = f"{commit_hash}~1"
        diff_files = get_modified_files_by_commits(repo, prev_commit_hash, commit_hash)
        java_changed_methods = find_changed_methods_by_language(repo, 'java', diff_files,
                                                                (prev_commit_hash, commit_hash))
        kotlin_changed_methods = find_changed_methods_by_language(repo, 'kotlin', diff_files,
                                                                  (prev_commit_hash, commit_hash))
        changed_methods = java_changed_methods | kotlin_changed_methods
        changed_methods = parse_method_signature(changed_methods)

        out = []
        for file_name, method_name in changed_methods:
            ext_pos = file_name.rfind(".")
            file_name = file_name[:ext_pos]
            full_method_name = f"{file_name}/{method_name}"
            out.append(full_method_name)

        return out
    # except Exception as e:
    #     print(f"Exception happened at '{commit_hash}'")
    #     print(e)


# TODO: Refactoring
def get_changed_methods(repo: Repo, issue_to_commits: Dict[int, List[str]]) -> Dict[int, List[str]]:
    issue_to_changed_methods = defaultdict(list)

    data_dir = "/Users/Denis.Sushentsev/Study/bug_ml_data_dir/changed_methods"
    os.makedirs(data_dir, exist_ok=True)

    for issue_id, commit_hashes in tqdm(list(issue_to_commits.items()), total=len(issue_to_commits)):
        changed_methods = []
        for commit_hash in commit_hashes:
            changed_methods.extend(get_commit_changed_methods(repo, commit_hash))

        changed_methods = list(set(changed_methods))  # Remove duplicates
        with open(join(data_dir, f"{issue_id}.txt"), "w") as file:
            file.write("\n".join(changed_methods))
        # for commit_hash in commit_hashes:
        #     commit_changed_methods = get_commit_changed_methods(repo, commit_hash)
        #     issue_to_changed_methods[issue_id].extend(commit_changed_methods)
        #
        # issue_to_changed_methods[issue_id] = list(set(issue_to_changed_methods[issue_id]))  # Remove duplicates

    return issue_to_changed_methods


def save_changed_methods(repo_path: str, data_dir: str):
    """
    Parses changed methods in saves to data directory.
    """

    print("Parsing changed methods")
    repo = Repo(repo_path)
    issue_to_commits = load_issue_to_commits(data_dir)
    changed_methods = get_changed_methods(repo, issue_to_commits)
    save(changed_methods, data_dir)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--repo_path", type=str)
    parser.add_argument("--data_dir", type=str)
    args = parser.parse_args()

    save_changed_methods(args.repo_path, args.data_dir)
