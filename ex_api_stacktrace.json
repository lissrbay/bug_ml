[{"code": "aW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5tYXRoMy5leGNlcHRpb24udXRpbC5Mb2NhbGl6ZWRGb3JtYXRzOwppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLm1hdGgzLmdlb21ldHJ5LlZlY3RvcjsKaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5tYXRoMy5nZW9tZXRyeS5ldWNsaWRlYW4ub25lZC5FdWNsaWRlYW4xRDsKaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5tYXRoMy5nZW9tZXRyeS5ldWNsaWRlYW4ub25lZC5JbnRlcnZhbHNTZXQ7CmltcG9ydCBvcmcuYXBhY2hlLmNvbW1vbnMubWF0aDMuZ2VvbWV0cnkuZXVjbGlkZWFuLm9uZWQuVmVjdG9yMUQ7CmltcG9ydCBvcmcuYXBhY2hlLmNvbW1vbnMubWF0aDMuZ2VvbWV0cnkucGFydGl0aW9uaW5nLkVtYmVkZGluZzsKaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5tYXRoMy51dGlsLkZhc3RNYXRoOwppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLm1hdGgzLnV0aWwuUHJlY2lzaW9uOwoKLyoqIFRoZSBjbGFzcyByZXByZXNlbnQgbGluZXMgaW4gYSB0aHJlZSBkaW1lbnNpb25hbCBzcGFjZS4KCiAqIDxwPkVhY2ggb3JpZW50ZWQgbGluZSBpcyBpbnRyaW5zaWNhbGx5IGFzc29jaWF0ZWQgd2l0aCBhbiBhYnNjaXNzYQogKiB3aGljaCBpcyBhIGNvb3JkaW5hdGUgb24gdGhlIGxpbmUuIFRoZSBwb2ludCBhdCBhYnNjaXNzYSAwIGlzIHRoZQogKiBvcnRob2dvbmFsIHByb2plY3Rpb24gb2YgdGhlIG9yaWdpbiBvbiB0aGUgbGluZSwgYW5vdGhlciBlcXVpdmFsZW50CiAqIHdheSB0byBleHByZXNzIHRoaXMgaXMgdG8gc2F5IHRoYXQgaXQgaXMgdGhlIHBvaW50IG9mIHRoZSBsaW5lCiAqIHdoaWNoIGlzIGNsb3Nlc3QgdG8gdGhlIG9yaWdpbi4gQWJzY2lzc2EgaW5jcmVhc2VzIGluIHRoZSBsaW5lCiAqIGRpcmVjdGlvbi48L3A+CgogKiBAdmVyc2lvbiAkSWQkCiAqIEBzaW5jZSAzLjAKICovCnB1YmxpYyBjbGFzcyBMaW5lIGltcGxlbWVudHMgRW1iZWRkaW5nPEV1Y2xpZGVhbjNELCBFdWNsaWRlYW4xRD4gewoKICAgIC8qKiBMaW5lIGRpcmVjdGlvbi4gKi8KICAgIHByaXZhdGUgVmVjdG9yM0QgZGlyZWN0aW9uOwoKICAgIC8qKiBMaW5lIHBvaW50IGNsb3Nlc3QgdG8gdGhlIG9yaWdpbi4gKi8KICAgIHByaXZhdGUgVmVjdG9yM0QgemVybzsKCiAgICAvKiogQnVpbGQgYSBsaW5lIGZyb20gdHdvIHBvaW50cy4KICAgICAqIEBwYXJhbSBwMSBmaXJzdCBwb2ludCBiZWxvbmdpbmcgdG8gdGhlIGxpbmUgKHRoaXMgY2FuIGJlIGFueSBwb2ludCkKICAgICAqIEBwYXJhbSBwMiBzZWNvbmQgcG9pbnQgYmVsb25naW5nIHRvIHRoZSBsaW5lICh0aGlzIGNhbiBiZSBhbnkgcG9pbnQsIGRpZmZlcmVudCBmcm9tIHAxKQogICAgICogQGV4Y2VwdGlvbiBNYXRoSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uIGlmIHRoZSBwb2ludHMgYXJlIGVxdWFsCiAgICAgKi8KICAgIHB1YmxpYyBMaW5lKGZpbmFsIFZlY3RvcjNEIHAxLCBmaW5hbCBWZWN0b3IzRCBwMikgdGhyb3dzIE1hdGhJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24gewogICAgICAgIHJlc2V0KHAxLCBwMik7CiAgICB9CgogICAgLyoqIENvcHkgY29uc3RydWN0b3IuCiAgICAgKiA8cD5UaGUgY3JlYXRlZCBpbnN0YW5jZSBpcyBjb21wbGV0ZWx5IGluZGVwZW5kZW50IGZyb20gdGhlCiAgICAgKiBvcmlnaW5hbCBpbnN0YW5jZSwgaXQgaXMgYSBkZWVwIGNvcHkuPC9wPgogICAgICogQHBhcmFtIGxpbmUgbGluZSB0byBjb3B5CiAgICAgKi8KICAgIHB1YmxpYyBMaW5lKGZpbmFsIExpbmUgbGluZSkgewogICAgICAgIHRoaXMuZGlyZWN0aW9uID0gbGluZS5kaXJlY3Rpb247CiAgICAgICAgdGhpcy56ZXJvICAgICAgPSBsaW5lLnplcm87CiAgICB9CgogICAgLyoqIFJlc2V0IHRoZSBpbnN0YW5jZSBhcyBpZiBidWlsdCBmcm9tIHR3byBwb2ludHMuCiAgICAgKiBAcGFyYW0gcDEgZmlyc3QgcG9pbnQgYmVsb25naW5nIHRvIHRoZSBsaW5lICh0aGlzIGNhbiBiZSBhbnkgcG9pbnQpCiAgICAgKiBAcGFyYW0gcDIgc2Vjb25kIHBvaW50IGJlbG9uZ2luZyB0byB0aGUgbGluZSAodGhpcyBjYW4gYmUgYW55IHBvaW50LCBkaWZmZXJlbnQgZnJvbSBwMSkKICAgICAqIEBleGNlcHRpb24gTWF0aElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbiBpZiB0aGUgcG9pbnRzIGFyZSBlcXVhbAogICAgICovCiAgICBwdWJsaWMgdm9pZCByZXNldChmaW5hbCBWZWN0b3IzRCBwMSwgZmluYWwgVmVjdG9yM0QgcDIpIHRocm93cyBNYXRoSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uIHsKICAgICAgICBmaW5hbCBWZWN0b3IzRCBkZWx0YSA9IHAyLnN1YnRyYWN0KHAxKTsKICAgICAgICBmaW5hbCBkb3VibGUgbm9ybTIgPSBkZWx0YS5nZXROb3JtU3EoKTsKICAgICAgICBpZiAobm9ybTIgPT0gMC4wKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBNYXRoSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uKExvY2FsaXplZEZvcm1hdHMuWkVST19OT1JNKTsKICAgICAgICB9CiAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSBuZXcgVmVjdG9yM0QoMS4wIC8gRmFzdE1hdGguc3FydChub3JtMiksIGRlbHRhKTsKICAgICAgICB6ZXJvID0gbmV3IFZlY3RvcjNEKDEuMCwgcDEsIC1wMS5kb3RQcm9kdWN0KGRlbHRhKSAvIG5vcm0yLCBkZWx0YSk7CiAgICB9CgogICAgLyoqIEdldCBhIGxpbmUgd2l0aCByZXZlcnNlZCBkaXJlY3Rpb24uCiAgICAgKiBAcmV0dXJuIGEgbmV3IGluc3RhbmNlLCB3aXRoIHJldmVyc2VkIGRpcmVjdGlvbgogICAgICovCiAgICBwdWJsaWMgTGluZSByZXZlcnQoKSB7CiAgICAgICAgZmluYWwgTGluZSByZXZlcnRlZCA9IG5ldyBMaW5lKHRoaXMpOwogICAgICAgIHJldmVydGVkLmRpcmVjdGlvbiA9IHJldmVydGVkLmRpcmVjdGlvbi5uZWdhdGUoKTsKICAgICAgICByZXR1cm4gcmV2ZXJ0ZWQ7CiAgICB9CgogICAgLyoqIEdldCB0aGUgbm9ybWFsaXplZCBkaXJlY3Rpb24gdmVjdG9yLgogICAgICogQHJldHVybiBub3JtYWxpemVkIGRpcmVjdGlvbiB2ZWN0b3IKICAgICAqLwogICAgcHVibGljIFZlY3RvcjNEIGdldERpcmVjdGlvbigpIHsKICAgICAgICByZXR1cm4gZGlyZWN0aW9uOwogICAgfQoKICAgIC8qKiBHZXQgdGhlIGxpbmUgcG9pbnQgY2xvc2VzdCB0byB0aGUgb3JpZ2luLgogICAgICogQHJldHVybiBsaW5lIHBvaW50IGNsb3Nlc3QgdG8gdGhlIG9yaWdpbgogICAgICovCiAgICBwdWJsaWMgVmVjdG9yM0QgZ2V0T3JpZ2luKCkgewogICAgICAgIHJldHVybiB6ZXJvOwogICAgfQoKICAgIC8qKiBHZXQgdGhlIGFic2Npc3NhIG9mIGEgcG9pbnQgd2l0aCByZXNwZWN0IHRvIHRoZSBsaW5lLgogICAgICogPHA+VGhlIGFic2Npc3NhIGlzIDAgaWYgdGhlIHByb2plY3Rpb24gb2YgdGhlIHBvaW50IGFuZCB0aGUKICAgICAqIHByb2plY3Rpb24gb2YgdGhlIGZyYW1lIG9yaWdpbiBvbiB0aGUgbGluZSBhcmUgdGhlIHNhbWUKICAgICAqIHBvaW50LjwvcD4KICAgICAqIEBwYXJhbSBwb2ludCBwb2ludCB0byBjaGVjawogICAgICogQHJldHVybiBhYnNjaXNzYSBvZiB0aGUgcG9pbnQKICAgICAqLwogICAgcHVibGljIGRvdWJsZSBnZXRBYnNjaXNzYShmaW5hbCBWZWN0b3IzRCBwb2ludCkgewogICAgICAgIHJldHVybiBwb2ludC5zdWJ0cmFjdCh6ZXJvKS5kb3RQcm9kdWN0KGRpcmVjdGlvbik7CiAgICB9CgogICAgLyoqIEdldCBvbmUgcG9pbnQgZnJvbSB0aGUgbGluZS4KICAgICAqIEBwYXJhbSBhYnNjaXNzYSBkZXNpcmVkIGFic2Npc3NhIGZvciB0aGUgcG9pbnQKICAgICAqIEByZXR1cm4gb25lIHBvaW50IGJlbG9uZ2luZyB0byB0aGUgbGluZSwgYXQgc3BlY2lmaWVkIGFic2Npc3NhCiAgICAgKi8KICAgIHB1YmxpYyBWZWN0b3IzRCBwb2ludEF0KGZpbmFsIGRvdWJsZSBhYnNjaXNzYSkgewogICAgICAgIHJldHVybiBuZXcgVmVjdG9yM0QoMS4wLCB6ZXJvLCBhYnNjaXNzYSwgZGlyZWN0aW9uKTsKICAgIH0KCiAgICAvKioge0Bpbmhlcml0RG9jfQogICAgICogQHNlZSAjZ2V0QWJzY2lzc2EoVmVjdG9yM0QpCiAgICAgKi8KICAgIHB1YmxpYyBWZWN0b3IxRCB0b1N1YlNwYWNlKGZpbmFsIFZlY3RvcjxFdWNsaWRlYW4zRD4gcG9pbnQpIHsKICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjFEKGdldEFic2Npc3NhKChWZWN0b3IzRCkgcG9pbnQpKTsKICAgIH0KCiAgICAvKioge0Bpbmhlcml0RG9jfQogICAgICogQHNlZSAjcG9pbnRBdChkb3VibGUpCiAgICAgKi8KICAgIHB1YmxpYyBWZWN0b3IzRCB0b1NwYWNlKGZpbmFsIFZlY3RvcjxFdWNsaWRlYW4xRD4gcG9pbnQpIHsKICAgICAgICByZXR1cm4gcG9pbnRBdCgoKFZlY3RvcjFEKSBwb2ludCkuZ2V0WCgpKTsKICAgIH0KCiAgICAvKiogQ2hlY2sgaWYgdGhlIGluc3RhbmNlIGlzIHNpbWlsYXIgdG8gYW5vdGhlciBsaW5lLgogICAgICogPHA+TGluZXMgYXJlIGNvbnNpZGVyZWQgc2ltaWxhciBpZiB0aGV5IGNvbnRhaW4gdGhlIHNhbWUKICAgICAqIHBvaW50cy4gVGhpcyBkb2VzIG5vdCBtZWFuIHRoZXkgYXJlIGVxdWFsIHNpbmNlIHRoZXkgY2FuIGhhdmUKICAgICAqIG9wcG9zaXRlIGRpcmVjdGlvbnMuPC9wPgogICAgICogQHBhcmFtIGxpbmUgbGluZSB0byB3aGljaCBpbnN0YW5jZSBzaG91bGQgYmUgY29tcGFyZWQKICAgICAqIEByZXR1cm4gdHJ1ZSBpZiB0aGUgbGluZXMgYXJlIHNpbWlsYXIKICAgICAqLwogICAgcHVibGljIGJvb2xlYW4gaXNTaW1pbGFyVG8oZmluYWwgTGluZSBsaW5lKSB7CiAgICAgICAgZmluYWwgZG91YmxlIGFuZ2xlID0gVmVjdG9yM0QuYW5nbGUoZGlyZWN0aW9uLCBsaW5lLmRpcmVjdGlvbik7CiAgICAgICAgcmV0dXJuICgoYW5nbGUgPCAxLjBlLTEwKSB8fCAoYW5nbGUgPiAoRmFzdE1hdGguUEkgLSAxLjBlLTEwKSkpICYmIGNvbnRhaW5zKGxpbmUuemVybyk7CiAgICB9CgogICAgLyoqIENoZWNrIGlmIHRoZSBpbnN0YW5jZSBjb250YWlucyBhIHBvaW50LgogICAgICogQHBhcmFtIHAgcG9pbnQgdG8gY2hlY2sKICAgICAqIEByZXR1cm4gdHJ1ZSBpZiBwIGJlbG9uZ3MgdG8gdGhlIGxpbmUKICAgICAqLwogICAgcHVibGljIGJvb2xlYW4gY29udGFpbnMoZmluYWwgVmVjdG9yM0QgcCkgewogICAgICAgIHJldHVybiBkaXN0YW5jZShwKSA8IDEuMGUtMTA7CiAgICB9CgogICAgLyoqIENvbXB1dGUgdGhlIGRpc3RhbmNlIGJldHdlZW4gdGhlIGluc3RhbmNlIGFuZCBhIHBvaW50LgogICAgICogQHBhcmFtIHAgdG8gY2hlY2sKICAgICAqIEByZXR1cm4gZGlzdGFuY2UgYmV0d2VlbiB0aGUgaW5zdGFuY2UgYW5kIHRoZSBwb2ludAogICAgICovCiAgICBwdWJsaWMgZG91YmxlIGRpc3RhbmNlKGZpbmFsIFZlY3RvcjNEIHApIHsKICAgICAgICBmaW5hbCBWZWN0b3IzRCBkID0gcC5zdWJ0cmFjdCh6ZXJvKTsKICAgICAgICBmaW5hbCBWZWN0b3IzRCBuID0gbmV3IFZlY3RvcjNEKDEuMCwgZCwgLWQuZG90UHJvZHVjdChkaXJlY3Rpb24pLCBkaXJlY3Rpb24pOwogICAgICAgIHJldHVybiBuLmdldE5vcm0oKTsKICAgIH0KCiAgICAvKiogQ29tcHV0ZSB0aGUgc2hvcnRlc3QgZGlzdGFuY2UgYmV0d2VlbiB0aGUgaW5zdGFuY2UgYW5kIGFub3RoZXIgbGluZS4KICAgICAqIEBwYXJhbSBsaW5lIGxpbmUgdG8gY2hlY2sgYWdhaW5zdCB0aGUgaW5zdGFuY2UKICAgICAqIEByZXR1cm4gc2hvcnRlc3QgZGlzdGFuY2UgYmV0d2VlbiB0aGUgaW5zdGFuY2UgYW5kIHRoZSBsaW5lCiAgICAgKi8KICAgIHB1YmxpYyBkb3VibGUgZGlzdGFuY2UoZmluYWwgTGluZSBsaW5lKSB7CgogICAgICAgIGZpbmFsIFZlY3RvcjNEIG5vcm1hbCA9IFZlY3RvcjNELmNyb3NzUHJvZHVjdChkaXJlY3Rpb24sIGxpbmUuZGlyZWN0aW9uKTsKICAgICAgICBmaW5hbCBkb3VibGUgbiA9IG5vcm1hbC5nZXROb3JtKCk7CiAgICAgICAgaWYgKG4gPCBQcmVjaXNpb24uU0FGRV9NSU4pIHsKICAgICAgICAgICAgLy8gbGluZXMgYXJlIHBhcmFsbGVsCiAgICAgICAgICAgIHJldHVybiBkaXN0YW5jZShsaW5lLnplcm8pOwogICAgICAgIH0KCiAgICAgICAgLy8gc2lnbmVkIHNlcGFyYXRpb24gb2YgdGhlIHR3byBwYXJhbGxlbCBwbGFuZXMgdGhhdCBjb250YWlucyB0aGUgbGluZXMKICAgICAgICBmaW5hbCBkb3VibGUgb2Zmc2V0ID0gbGluZS56ZXJvLnN1YnRyYWN0KHplcm8pLmRvdFByb2R1Y3Qobm9ybWFsKSAvIG47CgogICAgICAgIHJldHVybiBGYXN0TWF0aC5hYnMob2Zmc2V0KTsKCiAgICB9CgogICAgLyoqIENvbXB1dGUgdGhlIHBvaW50IG9mIHRoZSBpbnN0YW5jZSBjbG9zZXN0IHRvIGFub3RoZXIgbGluZS4KICAgICAqIEBwYXJhbSBsaW5lIGxpbmUgdG8gY2hlY2sgYWdhaW5zdCB0aGUgaW5zdGFuY2UKICAgICAqIEByZXR1cm4gcG9pbnQgb2YgdGhlIGluc3RhbmNlIGNsb3Nlc3QgdG8gYW5vdGhlciBsaW5lCiAgICAgKi8KICAgIHB1YmxpYyBWZWN0b3IzRCBjbG9zZXN0UG9pbnQoZmluYWwgTGluZSBsaW5lKSB7CgogICAgICAgIGZpbmFsIGRvdWJsZSBjb3MgPSBkaXJlY3Rpb24uZG90UHJvZHVjdChsaW5lLmRpcmVjdGlvbik7CiAgICAgICAgZmluYWwgZG91YmxlIG4gPSAxIC0gY29zICogY29zOwogICAgICAgIGlmIChuIDwgUHJlY2lzaW9uLkVQU0lMT04pIHsKICAgICAgICAgICAgLy8gdGhlIGxpbmVzIGFyZSBwYXJhbGxlbAogICAgICAgICAgICByZXR1cm4gemVybzsKICAgICAgICB9CgogICAgICAgIGZpbmFsIFZlY3RvcjNEIGRlbHRhMCA9IGxpbmUuemVyby5zdWJ0cmFjdCh6ZXJvKTsKICAgICAgICBmaW5hbCBkb3VibGUgYSAgICAgICAgPSBkZWx0YTAuZG90UHJvZHVjdChkaXJlY3Rpb24pOwogICAgICAgIGZpbmFsIGRvdWJsZSBiICAgICAgICA9IGRlbHRhMC5kb3RQcm9kdWN0KGxpbmUuZGlyZWN0aW9uKTsKCiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzRCgxLCB6ZXJvLCAoYSAtIGIgKiBjb3MpIC8gbiwgZGlyZWN0aW9uKTsKCiAgICB9CgogICAgLyoqIEdldCB0aGUgaW50ZXJzZWN0aW9uIHBvaW50IG9mIHRoZSBpbnN0YW5jZSBhbmQgYW5vdGhlciBsaW5lLgogICAgICogQHBhcmFtIGxpbmUgb3RoZXIgbGluZQogICAgICogQHJldHVybiBpbnRlcnNlY3Rpb24gcG9pbnQgb2YgdGhlIGluc3RhbmNlIGFuZCB0aGUgb3RoZXIgbGluZQogICAgICogb3IgbnVsbCBpZiB0aGVyZSBhcmUgbm8gaW50ZXJzZWN0aW9uIHBvaW50cwogICAgICovCiAgICBwdWJsaWMgVmVjdG9yM0QgaW50ZXJzZWN0aW9uKGZpbmFsIExpbmUgbGluZSkgewogICAgICAgIGZpbmFsIFZlY3RvcjNEIGNsb3Nlc3QgPSBjbG9zZXN0UG9pbnQobGluZSk7CiAgICAgICAgcmV0dXJuIGxpbmUuY29udGFpbnMoY2xvc2VzdCkgPyBjbG9zZXN0IDogbnVsbDsKICAgIH0KCiAgICAvKiogQnVpbGQgYSBzdWItbGluZSBjb3ZlcmluZyB0aGUgd2hvbGUgbGluZS4KICAgICAqIEByZXR1cm4gYSBzdWItbGluZSBjb3ZlcmluZyB0aGUgd2hvbGUgbGluZQogICAgICovCiAgICBwdWJsaWMgU3ViTGluZSB3aG9sZUxpbmUoKSB7CiAgICAgICAgcmV0dXJuIG5ldyBTdWJMaW5lKHRoaXMsIG5ldyBJbnRlcnZhbHNTZXQoKSk7CiAgICB9Cgp9", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 0, "line_number": "114", "label": 0, "method_name": "org.apache.commons.math3.geometry.euclidean.threed.Line.getAbscissa"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 1, "line_number": "129", "label": 0, "method_name": "org.apache.commons.math3.geometry.euclidean.threed.Line.toSubSpace"}}, {"code": "aW1wb3J0IGphdmEudXRpbC5MaXN0OwoKaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5tYXRoMy5leGNlcHRpb24uTWF0aElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbjsKaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5tYXRoMy5nZW9tZXRyeS5ldWNsaWRlYW4ub25lZC5JbnRlcnZhbDsKaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5tYXRoMy5nZW9tZXRyeS5ldWNsaWRlYW4ub25lZC5JbnRlcnZhbHNTZXQ7CmltcG9ydCBvcmcuYXBhY2hlLmNvbW1vbnMubWF0aDMuZ2VvbWV0cnkuZXVjbGlkZWFuLm9uZWQuVmVjdG9yMUQ7CmltcG9ydCBvcmcuYXBhY2hlLmNvbW1vbnMubWF0aDMuZ2VvbWV0cnkucGFydGl0aW9uaW5nLlJlZ2lvbi5Mb2NhdGlvbjsKCi8qKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgYSBzdWJzZXQgb2YgYSB7QGxpbmsgTGluZX0uCiAqIEB2ZXJzaW9uICRJZCQKICogQHNpbmNlIDMuMAogKi8KcHVibGljIGNsYXNzIFN1YkxpbmUgewoKICAgIC8qKiBVbmRlcmx5aW5nIGxpbmUuICovCiAgICBwcml2YXRlIGZpbmFsIExpbmUgbGluZTsKCiAgICAvKiogUmVtYWluaW5nIHJlZ2lvbiBvZiB0aGUgaHlwZXJwbGFuZS4gKi8KICAgIHByaXZhdGUgZmluYWwgSW50ZXJ2YWxzU2V0IHJlbWFpbmluZ1JlZ2lvbjsKCiAgICAvKiogU2ltcGxlIGNvbnN0cnVjdG9yLgogICAgICogQHBhcmFtIGxpbmUgdW5kZXJseWluZyBsaW5lCiAgICAgKiBAcGFyYW0gcmVtYWluaW5nUmVnaW9uIHJlbWFpbmluZyByZWdpb24gb2YgdGhlIGxpbmUKICAgICAqLwogICAgcHVibGljIFN1YkxpbmUoZmluYWwgTGluZSBsaW5lLCBmaW5hbCBJbnRlcnZhbHNTZXQgcmVtYWluaW5nUmVnaW9uKSB7CiAgICAgICAgdGhpcy5saW5lICAgICAgICAgICAgPSBsaW5lOwogICAgICAgIHRoaXMucmVtYWluaW5nUmVnaW9uID0gcmVtYWluaW5nUmVnaW9uOwogICAgfQoKICAgIC8qKiBDcmVhdGUgYSBzdWItbGluZSBmcm9tIHR3byBlbmRwb2ludHMuCiAgICAgKiBAcGFyYW0gc3RhcnQgc3RhcnQgcG9pbnQKICAgICAqIEBwYXJhbSBlbmQgZW5kIHBvaW50CiAgICAgKiBAZXhjZXB0aW9uIE1hdGhJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24gaWYgdGhlIHBvaW50cyBhcmUgZXF1YWwKICAgICAqLwogICAgcHVibGljIFN1YkxpbmUoZmluYWwgVmVjdG9yM0Qgc3RhcnQsIGZpbmFsIFZlY3RvcjNEIGVuZCkKICAgICAgICB0aHJvd3MgTWF0aElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbiB7CiAgICAgICAgdGhpcyhuZXcgTGluZShzdGFydCwgZW5kKSwgYnVpbGRJbnRlcnZhbFNldChzdGFydCwgZW5kKSk7CiAgICB9CgogICAgLyoqIENyZWF0ZSBhIHN1Yi1saW5lIGZyb20gYSBzZWdtZW50LgogICAgICogQHBhcmFtIHNlZ21lbnQgc2luZ2xlIHNlZ21lbnQgZm9ybWluZyB0aGUgc3ViLWxpbmUKICAgICAqIEBleGNlcHRpb24gTWF0aElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbiBpZiB0aGUgc2VnbWVudCBlbmRwb2ludHMgYXJlIGVxdWFsCiAgICAgKi8KICAgIHB1YmxpYyBTdWJMaW5lKGZpbmFsIFNlZ21lbnQgc2VnbWVudCkgdGhyb3dzIE1hdGhJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24gewogICAgICAgIHRoaXMoc2VnbWVudC5nZXRMaW5lKCksIGJ1aWxkSW50ZXJ2YWxTZXQoc2VnbWVudC5nZXRTdGFydCgpLCBzZWdtZW50LmdldEVuZCgpKSk7CiAgICB9CgogICAgLyoqIEdldCB0aGUgZW5kcG9pbnRzIG9mIHRoZSBzdWItbGluZS4KICAgICAqIDxwPgogICAgICogQSBzdWJsaW5lIG1heSBiZSBhbnkgYXJiaXRyYXJ5IG51bWJlciBvZiBkaXNqb2ludHMgc2VnbWVudHMsIHNvIHRoZSBlbmRwb2ludHMKICAgICAqIGFyZSBwcm92aWRlZCBhcyBhIGxpc3Qgb2YgZW5kcG9pbnQgcGFpcnMuIEVhY2ggZWxlbWVudCBvZiB0aGUgbGlzdCByZXByZXNlbnRzCiAgICAgKiBvbmUgc2VnbWVudCwgYW5kIGVhY2ggc2VnbWVudCBjb250YWlucyBhIHN0YXJ0IHBvaW50IGF0IGluZGV4IDAgYW5kIGFuIGVuZCBwb2ludAogICAgICogYXQgaW5kZXggMS4gSWYgdGhlIHN1Yi1saW5lIGlzIHVuYm91bmRlZCBpbiB0aGUgbmVnYXRpdmUgaW5maW5pdHkgZGlyZWN0aW9uLAogICAgICogdGhlIHN0YXJ0IHBvaW50IG9mIHRoZSBmaXJzdCBzZWdtZW50IHdpbGwgaGF2ZSBpbmZpbml0ZSBjb29yZGluYXRlcy4gSWYgdGhlCiAgICAgKiBzdWItbGluZSBpcyB1bmJvdW5kZWQgaW4gdGhlIHBvc2l0aXZlIGluZmluaXR5IGRpcmVjdGlvbiwgdGhlIGVuZCBwb2ludCBvZiB0aGUKICAgICAqIGxhc3Qgc2VnbWVudCB3aWxsIGhhdmUgaW5maW5pdGUgY29vcmRpbmF0ZXMuIFNvIGEgc3ViLWxpbmUgY292ZXJpbmcgdGhlIHdob2xlCiAgICAgKiBsaW5lIHdpbGwgY29udGFpbiBqdXN0IG9uZSByb3cgYW5kIGJvdGggZWxlbWVudHMgb2YgdGhpcyByb3cgd2lsbCBoYXZlIGluZmluaXRlCiAgICAgKiBjb29yZGluYXRlcy4gSWYgdGhlIHN1Yi1saW5lIGlzIGVtcHR5LCB0aGUgcmV0dXJuZWQgbGlzdCB3aWxsIGNvbnRhaW4gMCBzZWdtZW50cy4KICAgICAqIDwvcD4KICAgICAqIEByZXR1cm4gbGlzdCBvZiBzZWdtZW50cyBlbmRwb2ludHMKICAgICAqLwogICAgcHVibGljIExpc3Q8U2VnbWVudD4gZ2V0U2VnbWVudHMoKSB7CgogICAgICAgIGZpbmFsIExpc3Q8SW50ZXJ2YWw+IGxpc3QgPSByZW1haW5pbmdSZWdpb24uYXNMaXN0KCk7CiAgICAgICAgZmluYWwgTGlzdDxTZWdtZW50PiBzZWdtZW50cyA9IG5ldyBBcnJheUxpc3Q8U2VnbWVudD4oKTsKCiAgICAgICAgZm9yIChmaW5hbCBJbnRlcnZhbCBpbnRlcnZhbCA6IGxpc3QpIHsKICAgICAgICAgICAgZmluYWwgVmVjdG9yM0Qgc3RhcnQgPSBsaW5lLnRvU3BhY2UobmV3IFZlY3RvcjFEKGludGVydmFsLmdldEluZigpKSk7CiAgICAgICAgICAgIGZpbmFsIFZlY3RvcjNEIGVuZCAgID0gbGluZS50b1NwYWNlKG5ldyBWZWN0b3IxRChpbnRlcnZhbC5nZXRTdXAoKSkpOwogICAgICAgICAgICBzZWdtZW50cy5hZGQobmV3IFNlZ21lbnQoc3RhcnQsIGVuZCwgbGluZSkpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHNlZ21lbnRzOwoKICAgIH0KCiAgICAvKiogR2V0IHRoZSBpbnRlcnNlY3Rpb24gb2YgdGhlIGluc3RhbmNlIGFuZCBhbm90aGVyIHN1Yi1saW5lLgogICAgICogPHA+CiAgICAgKiBUaGlzIG1ldGhvZCBpcyByZWxhdGVkIHRvIHRoZSB7QGxpbmsgTGluZSNpbnRlcnNlY3Rpb24oTGluZSkKICAgICAqIGludGVyc2VjdGlvbn0gbWV0aG9kIGluIHRoZSB7QGxpbmsgTGluZSBMaW5lfSBjbGFzcywgYnV0IGluIGFkZGl0aW9uCiAgICAgKiB0byBjb21wdXRlIHRoZSBwb2ludCBhbG9uZyBpbmZpbml0ZSBsaW5lcywgaXQgYWxzbyBjaGVja3MgdGhlIHBvaW50CiAgICAgKiBsaWVzIG9uIGJvdGggc3ViLWxpbmUgcmFuZ2VzLgogICAgICogPC9wPgogICAgICogQHBhcmFtIHN1YkxpbmUgb3RoZXIgc3ViLWxpbmUgd2hpY2ggbWF5IGludGVyc2VjdCBpbnN0YW5jZQogICAgICogQHBhcmFtIGluY2x1ZGVFbmRQb2ludHMgaWYgdHJ1ZSwgZW5kcG9pbnRzIGFyZSBjb25zaWRlcmVkIHRvIGJlbG9uZyB0bwogICAgICogaW5zdGFuY2UgKGkuZS4gdGhleSBhcmUgY2xvc2VkIHNldHMpIGFuZCBtYXkgYmUgcmV0dXJuZWQsIG90aGVyd2lzZSBlbmRwb2ludHMKICAgICAqIGFyZSBjb25zaWRlcmVkIHRvIG5vdCBiZWxvbmcgdG8gaW5zdGFuY2UgKGkuZS4gdGhleSBhcmUgb3BlbiBzZXRzKSBhbmQgaW50ZXJzZWN0aW9uCiAgICAgKiBvY2N1cnJpbmcgb24gZW5kcG9pbnRzIGxlYWQgdG8gbnVsbCBiZWluZyByZXR1cm5lZAogICAgICogQHJldHVybiB0aGUgaW50ZXJzZWN0aW9uIHBvaW50IGlmIHRoZXJlIGlzIG9uZSwgbnVsbCBpZiB0aGUgc3ViLWxpbmVzIGRvbid0IGludGVyc2VjdAogICAgICovCiAgICBwdWJsaWMgVmVjdG9yM0QgaW50ZXJzZWN0aW9uKGZpbmFsIFN1YkxpbmUgc3ViTGluZSwgZmluYWwgYm9vbGVhbiBpbmNsdWRlRW5kUG9pbnRzKSB7CgogICAgICAgIC8vIGNvbXB1dGUgdGhlIGludGVyc2VjdGlvbiBvbiBpbmZpbml0ZSBsaW5lCiAgICAgICAgVmVjdG9yM0QgdjFEID0gbGluZS5pbnRlcnNlY3Rpb24oc3ViTGluZS5saW5lKTsKCiAgICAgICAgLy8gY2hlY2sgbG9jYXRpb24gb2YgcG9pbnQgd2l0aCByZXNwZWN0IHRvIGZpcnN0IHN1Yi1saW5lCiAgICAgICAgTG9jYXRpb24gbG9jMSA9IHJlbWFpbmluZ1JlZ2lvbi5jaGVja1BvaW50KGxpbmUudG9TdWJTcGFjZSh2MUQpKTsKCiAgICAgICAgLy8gY2hlY2sgbG9jYXRpb24gb2YgcG9pbnQgd2l0aCByZXNwZWN0IHRvIHNlY29uZCBzdWItbGluZQogICAgICAgIExvY2F0aW9uIGxvYzIgPSBzdWJMaW5lLnJlbWFpbmluZ1JlZ2lvbi5jaGVja1BvaW50KHN1YkxpbmUubGluZS50b1N1YlNwYWNlKHYxRCkpOwoKICAgICAgICBpZiAoaW5jbHVkZUVuZFBvaW50cykgewogICAgICAgICAgICByZXR1cm4gKChsb2MxICE9IExvY2F0aW9uLk9VVFNJREUpICYmIChsb2MyICE9IExvY2F0aW9uLk9VVFNJREUpKSA/IHYxRCA6IG51bGw7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuICgobG9jMSA9PSBMb2NhdGlvbi5JTlNJREUpICYmIChsb2MyID09IExvY2F0aW9uLklOU0lERSkpID8gdjFEIDogbnVsbDsKICAgICAgICB9CgogICAgfQoKICAgIC8qKiBCdWlsZCBhbiBpbnRlcnZhbCBzZXQgZnJvbSB0d28gcG9pbnRzLgogICAgICogQHBhcmFtIHN0YXJ0IHN0YXJ0IHBvaW50CiAgICAgKiBAcGFyYW0gZW5kIGVuZCBwb2ludAogICAgICogQHJldHVybiBhbiBpbnRlcnZhbCBzZXQKICAgICAqIEBleGNlcHRpb24gTWF0aElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbiBpZiB0aGUgcG9pbnRzIGFyZSBlcXVhbAogICAgICovCiAgICBwcml2YXRlIHN0YXRpYyBJbnRlcnZhbHNTZXQgYnVpbGRJbnRlcnZhbFNldChmaW5hbCBWZWN0b3IzRCBzdGFydCwgZmluYWwgVmVjdG9yM0QgZW5kKQogICAgICAgIHRocm93cyBNYXRoSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uIHsKICAgICAgICBmaW5hbCBMaW5lIGxpbmUgPSBuZXcgTGluZShzdGFydCwgZW5kKTsKICAgICAgICByZXR1cm4gbmV3IEludGVydmFsc1NldChsaW5lLnRvU3ViU3BhY2Uoc3RhcnQpLmdldFgoKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lLnRvU3ViU3BhY2UoZW5kKS5nZXRYKCkpOwogICAgfQoKfQ==", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 2, "line_number": "116", "label": 0, "method_name": "org.apache.commons.math3.geometry.euclidean.threed.SubLine.intersection"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 3, "line_number": "160", "label": 0, "method_name": "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testIntersectionNotIntersecting"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 4, "line_number": -1, "label": 0, "method_name": "sun.reflect.NativeMethodAccessorImpl.invoke0"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 5, "line_number": "62", "label": 0, "method_name": "sun.reflect.NativeMethodAccessorImpl.invoke"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 6, "line_number": "43", "label": 0, "method_name": "sun.reflect.DelegatingMethodAccessorImpl.invoke"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 7, "line_number": "498", "label": 0, "method_name": "java.lang.reflect.Method.invoke"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 8, "line_number": "47", "label": 0, "method_name": "org.junit.runners.model.FrameworkMethod$1.runReflectiveCall"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 9, "line_number": "12", "label": 0, "method_name": "org.junit.internal.runners.model.ReflectiveCallable.run"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 10, "line_number": "44", "label": 0, "method_name": "org.junit.runners.model.FrameworkMethod.invokeExplosively"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 11, "line_number": "17", "label": 0, "method_name": "org.junit.internal.runners.statements.InvokeMethod.evaluate"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 12, "line_number": "271", "label": 0, "method_name": "org.junit.runners.ParentRunner.runLeaf"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 13, "line_number": "4", "label": 0, "method_name": "org.junit.runners.BlockJUnit4ClassRunner.runChild"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 14, "line_number": "4", "label": 0, "method_name": "org.junit.runners.BlockJUnit4ClassRunner.runChild"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 15, "line_number": "238", "label": 0, "method_name": "org.junit.runners.ParentRunner$3.run"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 16, "line_number": "63", "label": 0, "method_name": "org.junit.runners.ParentRunner$1.schedule"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 17, "line_number": "236", "label": 0, "method_name": "org.junit.runners.ParentRunner.runChildren"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 18, "line_number": "53", "label": 0, "method_name": "org.junit.runners.ParentRunner.access$000"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 19, "line_number": "229", "label": 0, "method_name": "org.junit.runners.ParentRunner$2.evaluate"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 20, "line_number": "309", "label": 0, "method_name": "org.junit.runners.ParentRunner.run"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 21, "line_number": "4", "label": 0, "method_name": "junit.framework.JUnit4TestAdapter.run"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 22, "line_number": "520", "label": 0, "method_name": "org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 23, "line_number": "1484", "label": 0, "method_name": "org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 24, "line_number": "872", "label": 0, "method_name": "org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 25, "line_number": "1972", "label": 0, "method_name": "org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 26, "line_number": "824", "label": 0, "method_name": "org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 27, "line_number": "2277", "label": 0, "method_name": "org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 28, "line_number": "291", "label": 0, "method_name": "org.apache.tools.ant.UnknownElement.execute"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 29, "line_number": -1, "label": 0, "method_name": "sun.reflect.GeneratedMethodAccessor4.invoke"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 30, "line_number": "43", "label": 0, "method_name": "sun.reflect.DelegatingMethodAccessorImpl.invoke"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 31, "line_number": "498", "label": 0, "method_name": "java.lang.reflect.Method.invoke"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 32, "line_number": "106", "label": 0, "method_name": "org.apache.tools.ant.dispatch.DispatchUtils.execute"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 33, "line_number": "348", "label": 0, "method_name": "org.apache.tools.ant.Task.perform"}}, {"code": "Ci8qKgogKiBUYXJnZXQgb2YgdGhlIG9wdGltaXphdGlvbiBwcm9jZWR1cmUuCiAqIFRoZXkgYXJlIHRoZSB2YWx1ZXMgd2hpY2ggdGhlIG9iamVjdGl2ZSB2ZWN0b3IgZnVuY3Rpb24gbXVzdCByZXByb2R1Y2UKICogV2hlbiB0aGUgcGFyYW1ldGVycyBvZiB0aGUgbW9kZWwgaGF2ZSBiZWVuIG9wdGltaXplZC4KICogPGJyLz4KICogSW1tdXRhYmxlIGNsYXNzLgogKgogKiBAdmVyc2lvbiAkSWQkCiAqIEBzaW5jZSAzLjEKICovCnB1YmxpYyBjbGFzcyBUYXJnZXQgaW1wbGVtZW50cyBPcHRpbWl6YXRpb25EYXRhIHsKICAgIC8qKiBUYXJnZXQgdmFsdWVzIChvZiB0aGUgb2JqZWN0aXZlIHZlY3RvciBmdW5jdGlvbikuICovCiAgICBwcml2YXRlIGZpbmFsIGRvdWJsZVtdIHRhcmdldDsKCiAgICAvKioKICAgICAqIEBwYXJhbSBvYnNlcnZhdGlvbnMgVGFyZ2V0IHZhbHVlcy4KICAgICAqLwogICAgcHVibGljIFRhcmdldChkb3VibGVbXSBvYnNlcnZhdGlvbnMpIHsKICAgICAgICB0YXJnZXQgPSBvYnNlcnZhdGlvbnMuY2xvbmUoKTsKICAgIH0KCiAgICAvKioKICAgICAqIEdldHMgdGhlIGluaXRpYWwgZ3Vlc3MuCiAgICAgKgogICAgICogQHJldHVybiB0aGUgaW5pdGlhbCBndWVzcy4KICAgICAqLwogICAgcHVibGljIGRvdWJsZVtdIGdldFRhcmdldCgpIHsKICAgICAgICByZXR1cm4gdGFyZ2V0LmNsb25lKCk7CiAgICB9Cn0=", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 34, "line_number": "392", "label": 0, "method_name": "org.apache.tools.ant.Target.execute"}}, {"code": "Ci8qKgogKiBUYXJnZXQgb2YgdGhlIG9wdGltaXphdGlvbiBwcm9jZWR1cmUuCiAqIFRoZXkgYXJlIHRoZSB2YWx1ZXMgd2hpY2ggdGhlIG9iamVjdGl2ZSB2ZWN0b3IgZnVuY3Rpb24gbXVzdCByZXByb2R1Y2UKICogV2hlbiB0aGUgcGFyYW1ldGVycyBvZiB0aGUgbW9kZWwgaGF2ZSBiZWVuIG9wdGltaXplZC4KICogPGJyLz4KICogSW1tdXRhYmxlIGNsYXNzLgogKgogKiBAdmVyc2lvbiAkSWQkCiAqIEBzaW5jZSAzLjEKICovCnB1YmxpYyBjbGFzcyBUYXJnZXQgaW1wbGVtZW50cyBPcHRpbWl6YXRpb25EYXRhIHsKICAgIC8qKiBUYXJnZXQgdmFsdWVzIChvZiB0aGUgb2JqZWN0aXZlIHZlY3RvciBmdW5jdGlvbikuICovCiAgICBwcml2YXRlIGZpbmFsIGRvdWJsZVtdIHRhcmdldDsKCiAgICAvKioKICAgICAqIEBwYXJhbSBvYnNlcnZhdGlvbnMgVGFyZ2V0IHZhbHVlcy4KICAgICAqLwogICAgcHVibGljIFRhcmdldChkb3VibGVbXSBvYnNlcnZhdGlvbnMpIHsKICAgICAgICB0YXJnZXQgPSBvYnNlcnZhdGlvbnMuY2xvbmUoKTsKICAgIH0KCiAgICAvKioKICAgICAqIEdldHMgdGhlIGluaXRpYWwgZ3Vlc3MuCiAgICAgKgogICAgICogQHJldHVybiB0aGUgaW5pdGlhbCBndWVzcy4KICAgICAqLwogICAgcHVibGljIGRvdWJsZVtdIGdldFRhcmdldCgpIHsKICAgICAgICByZXR1cm4gdGFyZ2V0LmNsb25lKCk7CiAgICB9Cn0=", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 35, "line_number": "413", "label": 0, "method_name": "org.apache.tools.ant.Target.performTasks"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 36, "line_number": "1399", "label": 0, "method_name": "org.apache.tools.ant.Project.executeSortedTargets"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 37, "line_number": "1368", "label": 0, "method_name": "org.apache.tools.ant.Project.executeTarget"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 38, "line_number": "41", "label": 0, "method_name": "org.apache.tools.ant.helper.DefaultExecutor.executeTargets"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 39, "line_number": "1251", "label": 0, "method_name": "org.apache.tools.ant.Project.executeTargets"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 40, "line_number": "811", "label": 0, "method_name": "org.apache.tools.ant.Main.runBuild"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 41, "line_number": "217", "label": 0, "method_name": "org.apache.tools.ant.Main.startAnt"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 42, "line_number": "280", "label": 0, "method_name": "org.apache.tools.ant.launch.Launcher.run"}}, {"code": "", "meta": {"class": "java.lang.NullPointerException", "id": "4", "pos": 43, "line_number": "109", "label": 0, "method_name": "org.apache.tools.ant.launch.Launcher.main"}}]